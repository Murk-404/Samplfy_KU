import { writeJSON } from '@spotifly/utils';
import fetch from 'node-fetch';
import { createParser } from '@eegli/tinyparse';
import http from 'http';

const defaultConfig = {
  clientId: '',
  clientSecret: '',
  port: 3000,
  noEmit: false,
  outDir: '',
  fileName: 'spotify-token',
  scopes: 'user-read-email'
};
const {
  parse,
  help
} = createParser(defaultConfig, {
  options: {
    clientId: {
      required: true,
      description: 'The client id of your Spotify application'
    },
    clientSecret: {
      required: true,
      description: 'The client secret of your Spotify application'
    },
    scopes: {
      shortFlag: '-s',
      description: 'Spotify authorization scopes. Multiple scopes need to be separated by a space. Default: "user-read-email"'
    },
    port: {
      shortFlag: '-p',
      description: 'Port for the localhost redirect URL. Default: 3000'
    },
    outDir: {
      shortFlag: '-o',
      description: 'Custom relative output directory. Default: Current directory'
    },
    fileName: {
      shortFlag: '-f',
      description: 'Custom name for the output JSON file. Default: "spotify-token"'
    },
    noEmit: {
      description: 'When set to true, does not save the token to the file system. Default: false'
    }
  }
});

const localhostUrl = async port => {
  return new Promise((resolve, reject) => {
    const server = http.createServer((req, res) => {
      res.writeHead(200, {
        'Content-Type': 'text/plain'
      });
      res.end('You can now close this window');
      res.once('finish', () => {
        server.close(() => {
          if (req.url) resolve(req.url.slice(1));
          reject("Couldn't get code or state");
        });
      });
    }).listen(port);
  });
};

const id = () => Math.random().toString(36).slice(2);

const authorize = async options => {
  const config = { ...defaultConfig,
    ...options
  };
  const redirectUri = `http://localhost:${config.port}`;
  const state = id();
  const spotifyUrl = 'https://accounts.spotify.com/authorize?' + new URLSearchParams({
    response_type: 'code',
    show_dialog: 'true',
    state,
    client_id: config.clientId,
    redirect_uri: redirectUri,
    scope: config.scopes
  }).toString();
  console.info('Please click the link to login to Spotify in the browser\n');
  console.info(spotifyUrl + '\n');
  const authUrl = await localhostUrl(config.port);
  const params = new URLSearchParams(authUrl);
  const receivedCode = params.get('code');
  const receivedState = params.get('state');

  if (receivedState !== state) {
    throw new Error('Received and original state do not match');
  }

  if (!receivedCode) {
    throw new Error('No code received');
  }

  console.info('Login successfull! Cleaning up...\n');
  const tokenRequestBody = new URLSearchParams({
    grant_type: 'authorization_code',
    code: receivedCode,
    redirect_uri: redirectUri
  });
  const token = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      'Content-type': 'application/x-www-form-urlencoded',
      Authorization: 'Basic ' + Buffer.from(config.clientId + ':' + config.clientSecret).toString('base64')
    },
    body: tokenRequestBody.toString()
  }).then(res => res.json());
  token.date_obtained = new Date().toUTCString();

  if (!config.noEmit) {
    const outDir = await writeJSON({
      path: config.outDir,
      fileName: config.fileName,
      data: token
    });
    console.info(`Success! Saved Spotify access token to "${outDir}"`);
  }

  return token;
};

export { authorize as a, help as h, parse as p };
