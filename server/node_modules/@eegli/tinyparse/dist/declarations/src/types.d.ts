export declare type FlagOption = {
    required?: boolean;
    description?: string;
    shortFlag?: `-${string}`;
    customValidator?: {
        isValid: (value: unknown) => boolean;
        errorMessage: (value: unknown) => string;
    };
};
export declare type FilePathArg = {
    longFlag: `--${string}`;
    description?: string;
};
export declare type ParsingOptions<K = string, V = K extends Record<string, unknown> ? keyof K : K extends string ? K : never> = {
    filePathArg?: FilePathArg;
    options?: {
        [K in Extract<V, string>]?: FlagOption;
    };
};
export declare type InternalOptions = Map<string, FlagOption & {
    name: string;
}>;
export declare type SimpleRecord<T extends string = string> = Record<T, ObjectValues>;
export declare type ObjectValues = string | number | boolean;
